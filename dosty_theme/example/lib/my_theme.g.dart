// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'my_theme.dart';

// **************************************************************************
// DostyGenerator
// **************************************************************************

// Custom code generated by: Dosty Pshtiwan
// ********************************************************
// This is a custom generator for handling theme colors
// Generated for: Mytheme

class _$Mytheme {
  bool isDark = false;
  List<ThemeMode> typeOfThemes = [
    ThemeMode.system,
    ThemeMode.light,
    ThemeMode.dark
  ];
  ThemeMode currentTheme = ThemeMode.system;
  late Color color1;
  late Color color2;
  late Color color3;
  late Color color4;
  late Color grey2;
  late Color grey3;

  final ValueNotifier<ThemeMode> _themeNotifier =
      ValueNotifier(ThemeMode.system);

  ValueListenableBuilder DostyTheme(
      {required BuildContext context, required MaterialApp materialApp}) {
    return ValueListenableBuilder<ThemeMode>(
        valueListenable: _themeNotifier,
        builder: (_, ThemeMode currentMode, __) {
          if (_themeNotifier.value.index == ThemeMode.system.index) {
            isDark =
                MediaQuery.of(context).platformBrightness == Brightness.dark;
            toggleColor();
          }
          MaterialApp child = MaterialApp(
            actions: materialApp.actions,
            builder: materialApp.builder,
            checkerboardOffscreenLayers:
                materialApp.checkerboardOffscreenLayers,
            checkerboardRasterCacheImages:
                materialApp.checkerboardRasterCacheImages,
            color: materialApp.color,
            theme: materialApp.theme,
            darkTheme: materialApp.darkTheme ??
                ThemeData.dark().copyWith(
                  colorScheme: materialApp.theme?.colorScheme,
                ),
            debugShowCheckedModeBanner: materialApp.debugShowCheckedModeBanner,
            debugShowMaterialGrid: materialApp.debugShowMaterialGrid,
            highContrastDarkTheme: materialApp.highContrastDarkTheme,
            highContrastTheme: materialApp.highContrastTheme,
            home: materialApp.home,
            initialRoute: materialApp.initialRoute,
            locale: materialApp.locale,
            key: materialApp.key,
            localeListResolutionCallback:
                materialApp.localeListResolutionCallback,
            title: materialApp.title,
            themeMode: currentMode,
            localeResolutionCallback: materialApp.localeResolutionCallback,
            localizationsDelegates: materialApp.localizationsDelegates,
            navigatorKey: materialApp.navigatorKey,
            navigatorObservers: materialApp.navigatorObservers ?? [],
            onGenerateInitialRoutes: materialApp.onGenerateInitialRoutes,
            onGenerateRoute: materialApp.onGenerateRoute,
            onGenerateTitle: materialApp.onGenerateTitle,
            onNavigationNotification: materialApp.onNavigationNotification,
            onUnknownRoute: materialApp.onUnknownRoute,
            restorationScopeId: materialApp.restorationScopeId,
            routes: materialApp.routes ?? {},
            scaffoldMessengerKey: materialApp.scaffoldMessengerKey,
            scrollBehavior: materialApp.scrollBehavior,
            shortcuts: materialApp.shortcuts,
            showPerformanceOverlay: materialApp.showPerformanceOverlay,
            showSemanticsDebugger: materialApp.showSemanticsDebugger,
            supportedLocales: materialApp.supportedLocales,
            themeAnimationCurve: materialApp.themeAnimationCurve,
            themeAnimationDuration: materialApp.themeAnimationDuration,
            themeAnimationStyle: materialApp.themeAnimationStyle,
            useInheritedMediaQuery: materialApp.useInheritedMediaQuery,
          );

          return child;
        });
  }

  final Map<String, Map<String, Color>> _colors = {};
  _$Mytheme(
      {required List<DostyColor> myColors, ThemeMode mode = ThemeMode.system}) {
    currentTheme = _themeNotifier.value;
    myColors.forEach((color) {
      _colors[color.name] = color.toMap();
    });
    color1 = _colors['color1']!['light']!;
    color2 = _colors['color2']!['light']!;
    color3 = _colors['color3']!['light']!;
    color4 = _colors['color4']!['light']!;
    grey2 = _colors['grey2']!['light']!;
    grey3 = _colors['grey3']!['light']!;
    if (mode != ThemeMode.system) {
      if (mode == ThemeMode.dark) {
        toDark();
      } else {
        toLight();
      }
    }
  }
  toggleColor() {
    color1 = _colors['color1']![isDark ? 'dark' : 'light']!;
    color2 = _colors['color2']![isDark ? 'dark' : 'light']!;
    color3 = _colors['color3']![isDark ? 'dark' : 'light']!;
    color4 = _colors['color4']![isDark ? 'dark' : 'light']!;
    grey2 = _colors['grey2']![isDark ? 'dark' : 'light']!;
    grey3 = _colors['grey3']![isDark ? 'dark' : 'light']!;
  }

  toggle() {
    isDark = !isDark;
    if (isDark) {
      _themeNotifier.value = ThemeMode.dark;
    } else {
      _themeNotifier.value = ThemeMode.light;
    }

    currentTheme = _themeNotifier.value;
    toggleColor();
  }

  toDark() {
    isDark = true;
    _themeNotifier.value = ThemeMode.dark;
    currentTheme = _themeNotifier.value;
    toggleColor();
  }

  toLight() {
    isDark = false;
    _themeNotifier.value = ThemeMode.light;
    currentTheme = _themeNotifier.value;
    toggleColor();
  }

  toSystem(context) {
    isDark = MediaQuery.of(context).platformBrightness == Brightness.dark;
    _themeNotifier.value = ThemeMode.system;
    currentTheme = _themeNotifier.value;
    toggleColor();
  }

  adanceToggle({required BuildContext context, required ThemeMode mode}) {
    if (mode == ThemeMode.system) {
      isDark = MediaQuery.of(context).platformBrightness == Brightness.dark;
      _themeNotifier.value = ThemeMode.system;
    } else {
      isDark = mode == ThemeMode.dark;
      if (isDark) {
        _themeNotifier.value = ThemeMode.dark;
      } else {
        _themeNotifier.value = ThemeMode.light;
      }
    }
    currentTheme = _themeNotifier.value;
    toggleColor();
  }

  Color primary(context) => Theme.of(context).primaryColor;

  Color scaffoldBackgroundColor(context) =>
      Theme.of(context).scaffoldBackgroundColor;
  Color primaryColorScheme(context) => Theme.of(context).colorScheme.primary;
  Color secondaryColorScheme(context) =>
      Theme.of(context).colorScheme.secondary;
  Color cardColor(context) => Theme.of(context).cardColor;
  Color primaryColorDark(context) => Theme.of(context).primaryColorDark;
  Color primaryColorLight(context) => Theme.of(context).primaryColorLight;
  ThemeData theme(context) => Theme.of(context);
}
